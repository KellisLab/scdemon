* scdemon
** Installation
In R:
#+BEGIN_SRC R
  devtools::install_github("kellislab/scdemon")
#+END_SRC

In Python:
#+BEGIN_SRC sh
  pip install git+https://github.com/kellislab/scdemon
#+END_SRC
** API
*** robust_se_prepare
  takes in a 
*** robust_se_t
  takes in a corrected V matrix
** algorithm checklist
*** Normalization
batteries included
*** SVD/PCA/LSI
need extraction
*** PC filtering/adjustment
- Batch effects: use QR-SVD trick
- Multiome: Use common features and use orthogonal procrustes (SVD-based) [[https://doi.org/10.1007%2FBF02289451]]
*** Adjacency
*** Filtering KNN
p-value filtering based on expression?
*** Community detection
BigCLAM/Leiden
** structure
| directory   | description |
|-------------+-------------|
| src/scdemon | C++         |
| src/rcpp    | C++ in R    |
| scdemon/    | python      |
| R/          | R code      |

*** Code structure / flow
1. Extract $U$ $\Sigma$ $V'$, ensure =std=, =n_cells_by_counts=, =covariates= are present.
2. SE estimation. Use all dependencies, build in parallel with C++/OpenMP
3. Community detection in C++/OpenMP (leidenalg/bigclam)
4. Visualization and secondary analysis
**** Dataset storage (AnnData/AnnDataR)
- .varp: PCA based ANN (bool)
- .varp: filtered graph (CSR, data=tvalue)
- .var / .varm: clustering / cluster loadings
****  Dataset storage (SeuratObject)

***  Minimal conda environment
#+BEGIN_SRC bash
mamba create -n scdemonpy conda-forge::gxx_linux-64 conda-forge::gcc_linux-64 conda-forge::gfortran_linux-64 conda-forge::eigen conda-forge::gsl conda-forge::anndata conda-forge::tqdm conda-forge::pybind11 conda-forge::pip conda-forge::igraph conda-forge::umap-learn conda::scikit-build
mamba create -n scdemonr conda-forge::gxx_linux-64 conda-forge::gcc_linux-64 conda-forge::gfortran_linux-64 conda-forge::r-devtools conda-forge::r-rcppeigen conda-forge::r-rcppprogress conda-forge::gsl bioconda::bioconductor-rhdf5 conda-forge::r-igraph conda-forge::r-uwot conda-forge::r-irlba
#+END_SRC
** large to-dos (ordered by importance)
*** DONE C++ demo code linked to python and R
*** DONE HC0 SE in C++
**** DONE Eigen::MatrixBase<T> type
*** DONE HC0 SE in R
*** DONE HC0 SE in Python
*** DONE Sparse matrix conversion: 0/1 indexing
*** DONE threaded implementation
**** OpenMP vs STL parallel
*** DONE simplify setup
use data.table https://github.com/Rdatatable/data.table/blob/master/configure and nloptr https://github.com/astamm/nloptr/blob/master/configure as templates
- scikit-build + CMake for python
- configure.ac/configure/cleanup scripts for R  
*** DONE CMake build for R and python
*** TODO Prelim clustering with Laplacian + hclust
*** TODO c++ non-self SE method & interface
*** TODO pre-commit
- lintr action https://github.com/r-lib/actions/blob/v2/examples/lint.yaml
- python linting like anndata (ruff)
*** TODO pkgdown website
- Run usethis::use_github_action("pkgdown")
*** TODO testing/codecov
- pytest
- testthat
*** TODO vignettes in R and python
*** TODO CI circleCI like bioconda?
*** TODO sphinx/readthedocs
*** TODO bigclam in C++
*** TODO bigclam python/R interface
*** TODO C++ tests
*** TODO benchmarking
*** TODO PyPI package
like https://github.com/scverse/anndata/blob/main/.github/workflows/publish.yml
*** TODO Submit to bioconda (R, python versions)
*** TODO Add to bioconductor?, seurat-wrappers, scanpy.external.tl
*** TODO Single-cell Multi-omic: Use CCA or OPA; combine graphs
*** TODO metacell support instead of using PCA based
*** TODO support for WGCNA

